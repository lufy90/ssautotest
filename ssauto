#!/bin/env python36
# filename: ssauto
# Author: lufei
# Date: 20190815 13:42:07


from cmdmain import Main, Options
import getopt
import sys
from setting import *
from ssautolib import get_module_names_by_path


class SsautoOptions(Options):
  '''ssauto command line options'''
  def __init__(self, name, args=None):
    super(SsautoOptions, self).__init__(name, args)
    self.call_options = {
      'help' : self.usage,
      'run'  : self.run,
      'list' : self.list,
      'create' : self.createcase,
    }

  def usage(self, args=None):
    '''print this help text'''
    if not args:
      print(self.__doc__)
    else:
      for  i in args:
        print(self.call_options[i].__doc__)


  def run(self, args=None):
    '''run test'''
    pass

  def list(self, args=None):
    '''list tests'''
    helptxt = '''ssauto list [TESTPACKAGE|TESTMODULE] 
            [-v|--verbose][-h|--help][-d|--directory DIRECTORY]
            [-p|--priority N][-m|--modules]'''
    try:
      args = getopt.getopt(args, 'd:hmp:v', 
              ['directory', 'help', 'priority', 'verbose'])
    except getopt.GetoptError as e:
      print(e)
      print(helptxt)
      sys.exit(2)
    # initialize variables.
    directory = TCASEDIR
    priority = 0
    verbose = False
    listmodule = False

    for opt, arg in args[0]:
      if opt in ('-h', '--help'):
        print(helptxt)
        sys.exit(0)
      elif opt in ('-d', '--directory'):
        directory = arg
      elif opt in ('-p', '--priority'):
        priority = arg
      elif opt in ('-v', '--verbose'):
        verbose = True
      elif opt in ('-m', '--module'):
        listmodule = True


#    for d in args[1]:
#      list_subclasses(BASETCASE, d)
    test_module_names = get_module_names_by_path(directory)
    print(test_module_names) 

  def createcase(self,args=None):
    pass


class mdin2():
  '''ssauto main'''
  pass

class ssauto():
  '''ssauto class'''
  def execute(self):
    parser = argparse.ArgumentParser(description='A super simple test driver')
    parser.add_argument('run', metavar='A', type=int, )

if __name__ == '__main__':
  main = Main()
  main.execute(SsautoOptions)


