#!/bin/env python36
# filename: ssauto
# Author: lufei
# Date: 20190815 13:42:07


from cmdmain import Main, Options
import getopt
import sys,os
from setting import *
from ssautolib import get_module_names_by_path, get_modules_by_path
from ssautolib import get_subclass_by_module_name, get_subclasses_in_module


class SsautoOptions(Options):
  '''ssauto command line options'''
  def __init__(self, name, args=None):
    super(SsautoOptions, self).__init__(name, args)
    self.call_options = {
      'help' : self.usage,
      'run'  : self.run,
      'list' : self.list,
      'create' : self.createcase,
    }

  def usage(self, args=None):
    '''print this help text'''
    if not args:
      print(self.__doc__)
    else:
      for  i in args:
        print(self.call_options[i].__doc__)


  def run(self, args=None):
    '''run test'''
    pass

  def list(self, args=None):
    '''list tests'''
    helptxt = '''ssauto list [TESTPACKAGE|TESTMODULE] 
            [-v|--verbose][-h|--help][-d|--directory DIRECTORY]
            [-p|--priority N][-m|--modules]'''
    try:
      args = getopt.getopt(args, 'hm:p:t:v', 
              ['directory', 'help', 'priority', 'verbose'])
    except getopt.GetoptError as e:
      print(e)
      print(helptxt)
      sys.exit(2)
    # initialize variables.
    directories = []
    for i in args[1]:
      directories.extend(i.split(','))
    directories = directories or ['.',]
    test_modules = []
    test_classes = []
    priorities = []
    verbose = False
    

    for opt, arg in args[0]:
      if opt in ('-h', '--help'):
        print(helptxt)
        sys.exit(0)
      elif opt in ('-m', '--module'):
        test_modules = arg.split(',')
      elif opt in ('-p', '--priority'):
        priorities = arg.split(',')
      elif opt in ('-t', '--test'):
        test_classes = arg.split(',')
      elif opt in ('-v', '--verbose'):
        verbose = True


#    for d in args[1]:
#      list_subclasses(BASETCASE, d)
    for directory in directories:
      if not os.path.isdir(directory):
        print('No such directory: %s' % directory, file=sys.stderr)
        sys.exit(2)  # perror 2: No such file or directory
      modules = get_modules_by_path(directory)
      for module in modules:
         tclasses = get_subclasses_in_module(module, BASETCASE)
         if tclasses:
           pass
          
      test_module_names = get_module_names_by_path(directory)
      for name in test_module_names:
        print('%s' % name)
        for test_cls in get_subclass_by_module_name(name, 
          BASETCASE, path=directory):
          print('\t\t%s' % test_cls.__name__)

  def createcase(self,args=None):
    pass


class mdin2():
  '''ssauto main'''
  pass

class ssauto():
  '''ssauto class'''
  def execute(self):
    parser = argparse.ArgumentParser(description='A super simple test driver')
    parser.add_argument('run', metavar='A', type=int, )

if __name__ == '__main__':
  main = Main()
  main.execute(SsautoOptions)


